{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hbago\\\\Desktop\\\\react-ecommerce\\\\client\\\\src\\\\components\\\\checkout\\\\stripe-checkout\\\\StripeCheckout.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport { useStripe } from \"@stripe/react-stripe-js\";\nimport { CartContext } from \"../../../context/CartContext\";\nimport { fetchFromAPI } from \"../../../helper\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction StripeCheckout() {\n  _s();\n\n  const [email, setEmail] = useState('');\n  const {\n    cartItems\n  } = useContext(CartContext);\n  const stripe = useStripe();\n\n  const handleGuestCheckout = async e => {\n    e.preventDefault();\n    const line_items = cartItems.map(item => {\n      return {\n        quantity: item.quantity,\n        price_data: {\n          currency: 'eur',\n          unit_amount: item.price * 100,\n          //amount is in cents\n          product_data: {\n            name: item.title,\n            description: item.description,\n            images: [item.imageUrl]\n          }\n        }\n      };\n    });\n    const response = await fetchFromAPI('create-checkout-session', {\n      body: {\n        line_items,\n        customer_email: email\n      }\n    });\n    const {\n      sessionId\n    } = response;\n    const {\n      error\n    } = await stripe.redirectToCheckout({\n      sessionId\n    });\n\n    if (error) {\n      console.log(error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: handleGuestCheckout,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"email\",\n        onChange: e => setEmail(e.target.value),\n        placeholder: \"Email\",\n        value: email,\n        className: \"nomad-input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"submit-btn\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"button is-black nomad-btn submit\",\n        children: \"Checkout\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_s(StripeCheckout, \"vk1bH8GmzJUxUoNxoRdqSK+7oC8=\", false, function () {\n  return [useStripe];\n});\n\n_c = StripeCheckout;\nexport default StripeCheckout;\n\nvar _c;\n\n$RefreshReg$(_c, \"StripeCheckout\");","map":{"version":3,"sources":["C:/Users/hbago/Desktop/react-ecommerce/client/src/components/checkout/stripe-checkout/StripeCheckout.jsx"],"names":["React","useContext","useState","useStripe","CartContext","fetchFromAPI","StripeCheckout","email","setEmail","cartItems","stripe","handleGuestCheckout","e","preventDefault","line_items","map","item","quantity","price_data","currency","unit_amount","price","product_data","name","title","description","images","imageUrl","response","body","customer_email","sessionId","error","redirectToCheckout","console","log","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,QAA3B,QAA0C,OAA1C;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,WAAT,QAA4B,8BAA5B;AACA,SAASC,YAAT,QAA6B,iBAA7B;;;AAEA,SAASC,cAAT,GAA0B;AAAA;;AACtB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBN,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM;AAAEO,IAAAA;AAAF,MAAgBR,UAAU,CAACG,WAAD,CAAhC;AACA,QAAMM,MAAM,GAAGP,SAAS,EAAxB;;AACA,QAAMQ,mBAAmB,GAAG,MAAOC,CAAP,IAAa;AACrCA,IAAAA,CAAC,CAACC,cAAF;AACA,UAAMC,UAAU,GAAGL,SAAS,CAACM,GAAV,CAAcC,IAAI,IAAI;AACrC,aAAO;AACHC,QAAAA,QAAQ,EAAED,IAAI,CAACC,QADZ;AAEHC,QAAAA,UAAU,EAAE;AACRC,UAAAA,QAAQ,EAAE,KADF;AAERC,UAAAA,WAAW,EAAEJ,IAAI,CAACK,KAAL,GAAa,GAFlB;AAEuB;AAC/BC,UAAAA,YAAY,EAAC;AACTC,YAAAA,IAAI,EAAEP,IAAI,CAACQ,KADF;AAETC,YAAAA,WAAW,EAAET,IAAI,CAACS,WAFT;AAGTC,YAAAA,MAAM,EAAE,CAACV,IAAI,CAACW,QAAN;AAHC;AAHL;AAFT,OAAP;AAYH,KAbkB,CAAnB;AAcA,UAAMC,QAAQ,GAAI,MAAMvB,YAAY,CAAC,yBAAD,EAA4B;AAC5DwB,MAAAA,IAAI,EAAE;AAAEf,QAAAA,UAAF;AAAcgB,QAAAA,cAAc,EAAEvB;AAA9B;AADsD,KAA5B,CAApC;AAGA,UAAM;AAAEwB,MAAAA;AAAF,QAAgBH,QAAtB;AACA,UAAM;AAAEI,MAAAA;AAAF,QAAc,MAAMtB,MAAM,CAACuB,kBAAP,CAA0B;AAChDF,MAAAA;AADgD,KAA1B,CAA1B;;AAGA,QAAIC,KAAJ,EAAU;AACNE,MAAAA,OAAO,CAACC,GAAR,CAAYH,KAAZ;AACH;AACJ,GA1BD;;AA2BA,sBACI;AAAM,IAAA,QAAQ,EAAErB,mBAAhB;AAAA,4BACI;AAAA,6BACI;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,QAAQ,EAAEC,CAAC,IAAIJ,QAAQ,CAACI,CAAC,CAACwB,MAAF,CAASC,KAAV,CAA3C;AAA6D,QAAA,WAAW,EAAC,OAAzE;AAAiF,QAAA,KAAK,EAAE9B,KAAxF;AAA+F,QAAA,SAAS,EAAC;AAAzG;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YADJ,eAII;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACI;AAAQ,QAAA,IAAI,EAAC,QAAb;AAAsB,QAAA,SAAS,EAAC,kCAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH;;GAzCQD,c;UAGUH,S;;;KAHVG,c;AA2CT,eAAeA,cAAf","sourcesContent":["import React, {useContext, useState} from 'react';\r\nimport { useStripe } from \"@stripe/react-stripe-js\";\r\nimport { CartContext } from \"../../../context/CartContext\";\r\nimport { fetchFromAPI } from \"../../../helper\";\r\n\r\nfunction StripeCheckout() {\r\n    const [email, setEmail] = useState('');\r\n    const { cartItems } = useContext(CartContext);\r\n    const stripe = useStripe();\r\n    const handleGuestCheckout = async (e) => {\r\n        e.preventDefault();\r\n        const line_items = cartItems.map(item => {\r\n            return {\r\n                quantity: item.quantity,\r\n                price_data: {\r\n                    currency: 'eur',\r\n                    unit_amount: item.price * 100, //amount is in cents\r\n                    product_data:{\r\n                        name: item.title,\r\n                        description: item.description,\r\n                        images :[item.imageUrl],\r\n                    }\r\n                }\r\n            }\r\n        });\r\n        const response =  await fetchFromAPI('create-checkout-session', {\r\n            body: { line_items, customer_email: email },\r\n        });\r\n        const { sessionId } = response;\r\n        const { error } =   await stripe.redirectToCheckout({\r\n            sessionId\r\n        });\r\n        if (error){\r\n            console.log(error);\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={handleGuestCheckout}>\r\n            <div>\r\n                <input type=\"email\" onChange={e => setEmail(e.target.value)} placeholder=\"Email\" value={email} className=\"nomad-input\"/>\r\n            </div>\r\n            <div className=\"submit-btn\">\r\n                <button type=\"submit\" className=\"button is-black nomad-btn submit\">Checkout</button>\r\n            </div>\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default StripeCheckout;"]},"metadata":{},"sourceType":"module"}